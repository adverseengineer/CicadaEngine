#pragma once

#include "Input.h"
#include <sol/sol.hpp>

namespace Cicada::Scripting {

	inline static void CreateInputBindings(sol::state& lua) {
		
		lua.new_enum<Input::Key>("Key", {
			{ "SPACE", Input::Key::SPACE },
			{ "APOSTROPHE", Input::Key::APOSTROPHE },
			{ "COMMA", Input::Key::COMMA },
			{ "MINUS", Input::Key::MINUS },
			{ "PERIOD", Input::Key::PERIOD },
			{ "SLASH", Input::Key::SLASH },
			{ "NUM_0", Input::Key::NUM_0 },
			{ "NUM_1", Input::Key::NUM_1 },
			{ "NUM_2", Input::Key::NUM_2 },
			{ "NUM_3", Input::Key::NUM_3 },
			{ "NUM_4", Input::Key::NUM_4 },
			{ "NUM_5", Input::Key::NUM_5 },
			{ "NUM_6", Input::Key::NUM_6 },
			{ "NUM_7", Input::Key::NUM_7 },
			{ "NUM_8", Input::Key::NUM_8 },
			{ "NUM_9", Input::Key::NUM_9 },
			{ "SEMICOLON", Input::Key::SEMICOLON },
			{ "EQUAL", Input::Key::EQUAL },
			{ "A", Input::Key::A },
			{ "B", Input::Key::B },
			{ "C", Input::Key::C },
			{ "D", Input::Key::D },
			{ "E", Input::Key::E },
			{ "F", Input::Key::F },
			{ "G", Input::Key::G },
			{ "H", Input::Key::H },
			{ "I", Input::Key::I },
			{ "J", Input::Key::J },
			{ "K", Input::Key::K },
			{ "L", Input::Key::L },
			{ "M", Input::Key::M },
			{ "N", Input::Key::N },
			{ "O", Input::Key::O },
			{ "P", Input::Key::P },
			{ "Q", Input::Key::Q },
			{ "R", Input::Key::R },
			{ "S", Input::Key::S },
			{ "T", Input::Key::T },
			{ "U", Input::Key::U },
			{ "V", Input::Key::V },
			{ "W", Input::Key::W },
			{ "X", Input::Key::X },
			{ "Y", Input::Key::Y },
			{ "Z", Input::Key::Z },
			{ "LEFT_BRACKET", Input::Key::LEFT_BRACKET },
			{ "BACKSLASH", Input::Key::BACKSLASH },
			{ "RIGT_BRACKET", Input::Key::RIGHT_BRACKET },
			{ "GRAVE_ACCENT", Input::Key::GRAVE_ACCENT },
			{ "WORLD_1", Input::Key::WORLD_1 },
			{ "WORLD_2", Input::Key::WORLD_2 },
			{ "ESCAPE", Input::Key::ESCAPE },
			{ "ENTER", Input::Key::ENTER },
			{ "TAB", Input::Key::TAB },
			{ "BACKSPACE", Input::Key::BACKSPACE },
			{ "INSERT", Input::Key::INSERT },
			{ "DELETE", Input::Key::DELETE },
			{ "RIGHT", Input::Key::RIGHT },
			{ "LEFT", Input::Key::LEFT },
			{ "DOWN", Input::Key::DOWN },
			{ "UP", Input::Key::UP },
			{ "PAGE_UP", Input::Key::PAGE_UP },
			{ "PAGE_DOWN", Input::Key::PAGE_DOWN },
			{ "HOME", Input::Key::HOME },
			{ "END", Input::Key::END },
			{ "CAPS_LOCK", Input::Key::CAPS_LOCK },
			{ "SCROLL_LOCK", Input::Key::SCROLL_LOCK },
			{ "NUM_LOCK", Input::Key::NUM_LOCK },
			{ "PRINT_SCREEN", Input::Key::PRINT_SCREEN },
			{ "PAUSE", Input::Key::PAUSE },
			{ "F1", Input::Key::F1 },
			{ "F2", Input::Key::F2 },
			{ "F3", Input::Key::F3 },
			{ "F4", Input::Key::F4 },
			{ "F5", Input::Key::F5 },
			{ "F6", Input::Key::F6 },
			{ "F7", Input::Key::F7 },
			{ "F8", Input::Key::F8 },
			{ "F9", Input::Key::F9 },
			{ "F10", Input::Key::F10 },
			{ "F11", Input::Key::F11 },
			{ "F12", Input::Key::F12 },
			{ "F13", Input::Key::F13 },
			{ "F14", Input::Key::F14 },
			{ "F15", Input::Key::F15 },
			{ "F16", Input::Key::F16 },
			{ "F17", Input::Key::F17 },
			{ "F18", Input::Key::F18 },
			{ "F19", Input::Key::F19 },
			{ "F20", Input::Key::F20 },
			{ "F21", Input::Key::F21 },
			{ "F22", Input::Key::F22 },
			{ "F23", Input::Key::F23 },
			{ "F24", Input::Key::F24 },
			{ "F25", Input::Key::F25 },
			{ "KP_0", Input::Key::KP_0 },
			{ "KP_1", Input::Key::KP_1 },
			{ "KP_2", Input::Key::KP_2 },
			{ "KP_3", Input::Key::KP_3 },
			{ "KP_4", Input::Key::KP_4 },
			{ "KP_5", Input::Key::KP_5 },
			{ "KP_6", Input::Key::KP_6 },
			{ "KP_7", Input::Key::KP_7 },
			{ "KP_8", Input::Key::KP_8 },
			{ "KP_9", Input::Key::KP_9 },
			{ "KP_DECIMAL", Input::Key::KP_DECIMAL },
			{ "KP_DIVIDE", Input::Key::KP_DIVIDE },
			{ "KP_MULTIPLY", Input::Key::KP_MULTIPLY },
			{ "KP_SUBTRACT", Input::Key::KP_SUBTRACT },
			{ "KP_ADD", Input::Key::KP_ADD },
			{ "KP_ENTER", Input::Key::KP_ENTER },
			{ "KP_EQUAL", Input::Key::KP_EQUAL },
			{ "LEFT_SHIFT", Input::Key::LEFT_SHIFT },
			{ "LEFT_CONTROL", Input::Key::LEFT_CONTROL },
			{ "LEFT_ALT", Input::Key::LEFT_ALT },
			{ "LEFT_SUPER", Input::Key::LEFT_SUPER },
			{ "RIGHT_SHIFT", Input::Key::RIGHT_SHIFT },
			{ "RIGHT_CONTROL", Input::Key::RIGHT_CONTROL },
			{ "RIGHT_ALT", Input::Key::RIGHT_ALT },
			{ "RIGHT_SUPER", Input::Key::RIGHT_SUPER },
			{ "MENU", Input::Key::MENU }
		});

		lua.new_enum<Input::KeyState>("KeyState", {
			{ "PRESSED", Input::KeyState::PRESSED },
			{ "RELEASED", Input::KeyState::RELEASED },
		});
	}
}
